BEGIN { #this is the main routine for generating new .com files by the Verlet algorithym 
# Nov 2016 organized into functions, added empirical dispersion
# Oct 2015 added sanity check, elimiated dyn files and keepevery
# May 2015 added ability to force solvent into a sphere
# Feb 2015 added zeroatom ability to make solute centered in solvent
# Jan 2015 added applyforce to apply forces on motion of atoms and allow PMF calculations
# Dec 2014 added oniom charge specifications
# 2013 added multiple NMR calculations, molecular rotations, thermostat commands
# 2012 added NMR calculations
# 2011 added linkatoms in ONIOM
# Aug 2010 increased elements handled automatically but only up to bromine!
# Jan 2009 - a number of little changes to improve reporting, precision, etc
# Nov 2008 added ability to handle DRPs
# Aug 2008 added long list of atoms to handle 1-17 without change
# May 2008 added option to put out velocities in vellist - make diag=3
# version Feb 2008 incorporates methodfile, boxon and boxsize
# version Jan 2008 incorporates fixed atoms, oniom, and velocity damping
# version August 2007 incorporates keepevery to decrease size of dyn file
# version Sept 11, 2005 - incorportates meth3, meth4, meth5, meth6, but not yet rotation

initializeparameters()
initializeconstants()
readprogdynconf()

getline < "isomernumber"
isomernum = $1
getline < "runpointnumber"
runpointnum = $1

if (diag>=1) diagnosticsA()
readgeoPlusVelAndoldAndolder() #readgeoPlusVelAndoldAndolder sets numAtoms, weight[i], atSym[i], potentialE, oldarr[at,1to3], olderarr[at,1to3]
          # also sets apparentTemp,  KEold, does sanitycheck
if (DRP==1) readoldAdjForcesAndmaxMove() #for DRPs read in oldForce[at,123] and maxAtomMove
nmrstuffA() # sets nmrdo to 0 or 1, controls where NMR calcs are done
}
########################  END OF BEGIN  ##################################

#pull out the potential energy
/SCF Done/ || /EUMP2 =/ || / Energy=/ || /ONIOM:/ {
if (($1=="Energy=") && ($3=="NIter="))  newPotentialE=$2
if ($1=="SCF") newPotentialE=$5
if ($2=="extrapolated")  newPotentialE=$5
if ($1=="E2") {
   tempstring=$6
   split(tempstring, arr10, "D")
   newPotentialE=arr10[1]*(10^arr10[2])
   }
newPotEK=(newPotentialE-potentialE)*627.509
}

#must adjust next line for weird atoms
(/        1    / || /        2    / || /        3    / || /        4    / || /        5    / || /        6    / || /        7    / || /        8    / || /        9    / || /       10    / || /       11    / || /       12    / || /       13    / || /       14    / || /       15    / || /       16    / || /       17    / || /       18    / || /       19    / || /       20    / || /       21    / || /       22    / || /       23    / || /       24    / || /       25    / || /       26    / || /       27    / || /       28    / || /       29    / || /       30    / || /       31    / || /       32    / || /       33    / || /       34    / || /       35    /) && length($3) > 9 {
i=$1
for (j=1;j<=3;j++) {
   forceArr[i,j]=$(2+j)    #the raw units of the forces are Hartree/Bohr
   }
#if ((diag>1) && (i==1)) print "i,weight[i],forceArr[i,1],forceArr[i,2],forceArr[i,3]" >> "diagnostics"
#if (diag>1) print i,weight[i],forceArr[i,1],forceArr[i,2],forceArr[i,3] >> "diagnostics"
}

END {
if (sphereon==1) applysphereforce() # apply a force to bring atoms within a sphere.   This also figures out the density at 0.9*spheresize
# routines to apply forces between atoms, used for umbrella sampling
if (applyforceplane>0) doapplyforceplane() #used to apply a force on an atom versus its distance from a plane
setinterlockingsphereatom() #apply force to one of a series of atoms, whichever is closest to afatom[1]
if (applyforce>0) doapplyforce()
if (applyforceB>0) doapplyforceB()
if (applyforceC>0) doapplyforceC()
if (empiricaldispersion>0) doempiricaldispersion()
if (zeroatomon==1) dozeroatom() #routine to slowly move an atom toward the origin
if (thermostat==1) dothermostat()
if (DRP==1) doDRP() #routine for steepest descent path in mass weighted coordinates
if (DRP==0) doVerlet() #normal routine for Verlet
writetraj()
writecomfile()
}

########################################################### FUNCTIONS #################################################
function Distance(Atom1,Atom2) {
   return sqrt((oldarr[Atom1,1]-oldarr[Atom2,1])^2+(oldarr[Atom1,2]-oldarr[Atom2,2])^2+(oldarr[Atom1,3]-oldarr[Atom2,3])^2)
   }

# default parameters, including quassiclassical, no displacements, transition state, not a DRP
# do not change these - rather, change progdyn.conf to set the parameters
function initializeparameters() {
   initialDis=0; timestep=1E-15; scaling=1.0; temp=298.15
   classical=0; numimag=1; DRP=0; cannonball=0
   memory=20000000
   diag=1; checkpoint="g16.chk"; searchdir="positive"; boxon=0
   boxsize=10; maxAtomMove=0.1; title1="you"; title2="need"
   title3="a"; title4="progdyn.conf"; processors=1; highlevel=99999; linkatoms=0
   damping=1;nonstandard=0;geometry="nonlinear";nonstandard=0
   nmrtype=0;nmrevery=9999999;nmrcc=0;nmrrand=0;nmrdo=0
   thermostat=0;thermostatemult=1.00
   oniomcharge=0; oniommult=0
   applyforce=0; applyforceB=0; applyforceC=0; zeroatomon=0
   sphereon=0; spheresize=999; sphereforceK=0.01
   empiricaldispersion=0; radiusmultiplier=1.25
   }

function initializeconstants() {
   srand(PROCINFO["pid"])
   i=1;j=1;k=1
   c=29979245800; h=6.626075E-34; avNum=6.0221415E23
   RgasK=0.00198588; RgasJ=8.31447; pi=3.14159265359
   numAtoms=0; atomnumber=0
   conver1=4.184E26 #dividing by this converts amu angs^2 /s^2 to kcal/mol
   OFS="   "
   }

# read progdyn.conf for configuration info
function readprogdynconf() {
   blankLineTester=10
   while (blankLineTester>1) {
      getline < "progdyn.conf"
      if ($1=="method") method=$2
      if ($1=="method2") meth2=$2
      if ($1=="charge") charge=$2
      if ($1=="multiplicity") multiplicity=$2
      if ($1=="oniomchargemult") {
         oniomcharge=$2
         oniommult=$3
         }
      if ($1=="memory") memory=$2
      if ($1=="processors") processors=$2
      if ($1=="checkpoint") checkpoint=$2
      if ($1=="timestep") timestep=$2
      if ($1=="diagnostics") diag=$2
      if ($1=="temperature") temp=$2
      if ($1=="thermostat") thermostat=$2
      if ($1=="thermostatmult") thermostatmult=$2
      if (thermostatmult>1) thermostatmult=1/thermostatmult
      if ($1=="method3") meth3=$2
      if ($1=="method4") meth4=$2
      if ($1=="method5") meth5=$2
      if ($1=="method6") meth6=$2
      if ($1=="method7") meth7=$2
      if ($1=="highlevel") highlevel=$2
      if ($1=="linkatoms") linkatoms=$2
      if ($1=="fixedatom1") fixedatom1=$2
      if ($1=="fixedatom2") fixedatom2=$2
      if ($1=="fixedatom3") fixedatom3=$2
      if ($1=="fixedatom4") fixedatom4=$2
      if ($1=="boxon") boxon=$2
      if ($1=="boxsize") boxsize=$2
      if ($1=="sphereon") sphereon=$2
      if ($1=="spheresize") spheresize=$2
      if ($1=="sphereforce") sphereforceK=$2
      if ($1=="DRP") DRP=$2
      if ($1=="maxAtomMove") maxAtomMove=$2
      if ($1=="methodfile") methodfilelines=$2
      if ($1=="killcheck") killcheck=$2
      if ($1=="empiricaldispersion") empiricaldispersion=$2
      if ($1=="radiusmultiplier") radiusmultiplier=$2
      if ($1=="damping") damping=$2
      if ($1=="NMRmethod") nmrmethod=$2
      if ($1=="NMRmethod2") nmrmethod2=$2
      if ($1=="NMRmethod3") nmrmethod3=$2
      if ($1=="NMRtype") nmrtype=$2
      if ($1=="NMRevery") nmrevery=$2
      if ($1=="NMRrand") nmrrand=$2
      if ($1=="loadlimit") loadlimit=$2
      if ($1=="NMRcc") nmrcc=$2
      if ($1=="nonstandard") nonstandard=$2
      if ($1=="applyforce") {
         applyforce=$2; apforce=$3; apforceX0=$4; apforce2=$5; apforce3=$6
         }
      if ($1=="applyforceB") {
         applyforceB=$2; apforceB=$3; apforceX0B=$4; apforce2B=$5; apforce3B=$6
         }
      if ($1=="applyforceC") {
         applyforceC=$2; apforceC=$3; apforceX0C=$4; apforce2C=$5; apforce3C=$6
         }
      if ($1=="afatoms") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatom[i]=$(i+1)
            }
         }
      if ($1=="afatomsB") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatomB[i]=$(i+1)
            }
         }
      if ($1=="afatomsC") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatomC[i]=$(i+1)
            }
         }
      if ($1=="applyforceplane") {
         applyforceplane=$2; apforceplane=$3; apforceplaneX0=$4
         }  
      if ($1=="afplaneatoms") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afplaneatoms[i]=$(i+1)
            }
         }
      if ($1=="zeroatom") {
         zeroatomon=1
         zeroatom=$2
         }
      if ($1=="title") {
         title1=$2
         title2=$3
         title3=$4
         title4=$5
         }
      blankLineTester=length($0)
      }
   }

function diagnosticsA() {
   print "***************** starting progdynb *****************" >> "diagnostics"
   print "method,charge,multiplicity,memory" >> "diagnostics"
   print method,charge,multiplicity,memory >> "diagnostics"
   print "processors,checkpoint,title" >> "diagnostics"
   print processors,checkpoint,title1,title2,title3,title4 >> "diagnostics"
   }

function readgeoPlusVelAndoldAndolder() {
# get number of atoms and weights from geoPlusVel, and previous geometries from old and older
   getline < "geoPlusVel"
   numAtoms=$1
   for (i=1;i<=numAtoms;i++) {
      getline < "geoPlusVel"
      weight[i]=$5; atSym[i]=$1
      }
   blankLineTester=10
   while (blankLineTester>1) {
      getline < "geoPlusVel"
      if ($11=="potential") potentialE=$13
      blankLineTester=length($0)
      }

   for (at=1;at<=numAtoms;at++) {
      getline < "old"
      oldarr[at,1]=$4; oldarr[at,2]=$5; oldarr[at,3]=$6
      }

   for (at=1;at<=numAtoms;at++) {
      getline < "older"
      olderarr[at,1]=$4; olderarr[at,2]=$5; olderarr[at,3]=$6
      atomVel=((oldarr[at,1]-olderarr[at,1])^2 + (oldarr[at,2]-olderarr[at,2])^2 +(oldarr[at,3]-olderarr[at,3])^2)^.5
      KEold=KEold+0.5*weight[at]*(atomVel^2)/((timestep^2)*conver1) 
# sanity check - avoids trajectory blow up
      if (atomVel>1) exit
      }
   apparentTemp=KEold*2/(3*RgasK*numAtoms) # this is not the temperature at the previous point but rather 1.5 points back.
# sanity check - avoids trajectory blow up
   for (at=1;at<=numAtoms;at++) {
      if (((oldarr[at,1]-olderarr[at,1])^2)>1) exit
      }
   }

function readoldAdjForcesAndmaxMove() {
#for DRPs read in oldAdjForces and maxAtomMove
   for (at=1;at<=numAtoms;at++) {
      getline < "oldAdjForces"
      oldForce[at,1]=$1; oldForce[at,2]=$2; oldForce[at,3]=$3
      }
   getline < "maxMove"
   if (($1<maxAtomMove) && ($1>0)) maxAtomMove=$1
   if (maxAtomMove<0.000001) maxAtomMove=0.000001
   }

function nmrstuffA() {
# sets nmrdo to 0 or 1, controls where NMR calcs are done
   if ((nmrrand==0) && ((runpointnum % nmrevery)==0)) nmrdo=1
   if ((nmrrand==1) && (rand()<(1/nmrevery))) nmrdo=1
   getline < "uptimelist"
   x=1.0001*substr($10,1,3);if (x<8) x=8
# turn of nmrs if load is too high - this is under control of loadlimit parameter in progdyn.conf and requires proganal to make uptimelist
   if ((nmrrand==1) && (x>loadlimit)) nmrdo=0
   }

function applysphereforce() {
# apply a force to bring atoms within a sphere.   This also figures out the density at 0.9*spheresize
# We are going through the loop twice, the first time figure outs the total pressure, then scales the forces to limit the pressure to maxpressure
# the second time actually applies the pressure
   maxpressure=1000 #atmospheres.  Later we may parameterize this.
   sphereforcetotal=0
   for (i=1;i<=numAtoms;i++) {
      distToOrig=((oldarr[i,1]^2+oldarr[i,2]^2+oldarr[i,3]^2)^.5)
      if (distToOrig>spheresize) {
         sphereforce=sphereforceK*(distToOrig-spheresize)
         if (sphereforce>0.01) sphereforce=0.01 #important limit on force for atoms far outside of the sphere, not sure if value chosen is best
         sphereforcetotal=sphereforcetotal+sphereforce
         }
      }
   sphereforcetotalNewtons=sphereforcetotal*627.509*4184*1E10/(0.529177*avNum)
   surfaceareaSqMeters=4*pi*spheresize^2/1E20
   pressurePascal=sphereforcetotalNewtons/surfaceareaSqMeters
   pressureAtm=pressurePascal/101325
   if (pressureAtm>maxpressure) sphereforceK=sphereforceK*maxpressure/pressureAtm
# go through the loop again
   sphereforcetotal=0; totalweight=0
   for (i=1;i<=numAtoms;i++) {
      distToOrig=((oldarr[i,1]^2+oldarr[i,2]^2+oldarr[i,3]^2)^.5)
      if (distToOrig>spheresize) {
         sphereforce=sphereforceK*(distToOrig-spheresize)
         if (sphereforce>0.01) sphereforce=0.01 #important limit on force for atoms far outside of the sphere, not sure if value chosen is best
         sphereforcetotal=sphereforcetotal+sphereforce
         unitX=sphereforce*oldarr[i,1]/distToOrig;unitY=sphereforce*oldarr[i,2]/distToOrig;unitZ=sphereforce*oldarr[i,3]/distToOrig
         forceArr[i,1]=forceArr[i,1]-unitX;forceArr[i,2]=forceArr[i,2]-unitY;forceArr[i,3]=forceArr[i,3]-unitZ
         }
# calculate the density at 0.9*spheresize
      if (distToOrig<0.9*spheresize) {
         totalweight=totalweight+weight[i]
         }
      }
#recalculate pressure
   sphereforcetotalNewtons=sphereforcetotal*627.509*4184*1E10/(0.529177*avNum)
   surfaceareaSqMeters=4*pi*spheresize^2/1E20
   pressurePascal=sphereforcetotalNewtons/surfaceareaSqMeters
   pressureAtm=pressurePascal/101325
   density=(totalweight/avNum)/((4/3)*pi*(0.9*spheresize*1E-8)^3)
   }

function doapplyforceplane() {
#used to apply a force on an atom versus its distance from a plane
   if (afplaneatoms[4]<.5) {
      print "you need more atoms to define a plane"
      exit
      }
   for (i=2;i<8;i++) {
      if (afplaneatoms[i]>.5) {
         k=afplaneatoms[i]
         A[1,1]=A[1,1]+oldarr[k,1]^2;A[1,2]=A[1,2]+oldarr[k,1]*oldarr[k,2];A[1,3]=A[1,3]+oldarr[k,1]
         A[2,1]=A[2,1]+oldarr[k,1]*oldarr[k,2];A[2,2]=A[2,2]+oldarr[k,2]^2;A[2,3]=A[2,3]+oldarr[k,2]
         A[3,1]=A[3,1]+oldarr[k,1];A[3,2]=A[3,2]+oldarr[k,2];A[3,3]++
         b[1]=b[1]+oldarr[k,1]*oldarr[k,3];b[2]=b[2]+oldarr[k,2]*oldarr[k,3];b[3]=b[3]+oldarr[k,3]
# find center of mass assuming all atoms same weight
         cmass[1]=cmass[1]+oldarr[k,1];cmass[2]=cmass[2]+oldarr[k,2];cmass[3]=cmass[3]+oldarr[k,3];
         }
      }
   numplaneatoms=A[3,3]
   cmass[1]=cmass[1]/A[3,3];cmass[2]=cmass[2]/A[3,3];cmass[3]=cmass[3]/A[3,3]
#   print "matrix A"
#   for (i=1;i<=3;i++) {
#      print A[i,1],A[i,2],A[i,3]
#      }
#   print "matrix b"
#   print b[1],b[2],b[3]
   Det=A[1,1]*A[2,2]*A[3,3]+A[1,2]*A[2,3]*A[3,1]+A[1,3]*A[2,1]*A[3,2]-A[1,3]*A[2,2]*A[3,1]-A[1,2]*A[2,1]*A[3,3]-A[1,1]*A[2,3]*A[3,2]
   E=(b[1]*A[2,2]*A[3,3]+A[1,2]*A[2,3]*b[3]+A[1,3]*b[2]*A[3,2]-A[1,3]*A[2,2]*b[3]-A[1,2]*b[2]*A[3,3]-b[1]*A[2,3]*A[3,2])/Det
   F=(A[1,1]*b[2]*A[3,3]+b[1]*A[2,3]*A[3,1]+A[1,3]*A[2,1]*b[3]-A[1,3]*b[2]*A[3,1]-b[1]*A[2,1]*A[3,3]-A[1,1]*A[2,3]*b[3])/Det
   G=(A[1,1]*A[2,2]*b[3]+A[1,2]*b[2]*A[3,1]+b[1]*A[2,1]*A[3,2]-b[1]*A[2,2]*A[3,1]-A[1,2]*A[2,1]*b[3]-A[1,1]*b[2]*A[3,2])/Det
#  E, F, and G are the coefficients in the plane z=Ex+Fy+G"
# make a function that tests the fit
   for (i=2;i<8;i++) {
      if (afplaneatoms[i]>.5) {
         k=afplaneatoms[i]
         distplane=(-oldarr[k,1]*E-oldarr[k,2]*F+oldarr[k,3]-G)/(E^2+F^2+1)^.5;if (distplane<0) distplane=-distplane
         aberror=aberror+distplane
         }
      }
# if the fit is bad, as can happen, decrease to 3 atoms in plane, using only the first three atoms in list after the conatom
   if (aberror>2) {
      print "original aberror",aberror >> "diagnostics"
      A[1,1]=0;A[1,2]=0;A[1,3]=0;A[2,1]=0;A[2,2]=0;A[2,3]=0;A[3,1]=0;A[3,2]=0;A[3,3]=0
      for (i=2;i<5;i++) {
         k=afplaneatoms[i]
         A[1,1]=A[1,1]+oldarr[k,1]^2;A[1,2]=A[1,2]+oldarr[k,1]*oldarr[k,2];A[1,3]=A[1,3]+oldarr[k,1]
         A[2,1]=A[2,1]+oldarr[k,1]*oldarr[k,2];A[2,2]=A[2,2]+oldarr[k,2]^2;A[2,3]=A[2,3]+oldarr[k,2]
         A[3,1]=A[3,1]+oldarr[k,1];A[3,2]=A[3,2]+oldarr[k,2];A[3,3]++
         b[1]=b[1]+oldarr[k,1]*oldarr[k,3];b[2]=b[2]+oldarr[k,2]*oldarr[k,3];b[3]=b[3]+oldarr[k,3]
         }
      Det=A[1,1]*A[2,2]*A[3,3]+A[1,2]*A[2,3]*A[3,1]+A[1,3]*A[2,1]*A[3,2]-A[1,3]*A[2,2]*A[3,1]-A[1,2]*A[2,1]*A[3,3]-A[1,1]*A[2,3]*A[3,2]
      E=(b[1]*A[2,2]*A[3,3]+A[1,2]*A[2,3]*b[3]+A[1,3]*b[2]*A[3,2]-A[1,3]*A[2,2]*b[3]-A[1,2]*b[2]*A[3,3]-b[1]*A[2,3]*A[3,2])/Det
      F=(A[1,1]*b[2]*A[3,3]+b[1]*A[2,3]*A[3,1]+A[1,3]*A[2,1]*b[3]-A[1,3]*b[2]*A[3,1]-b[1]*A[2,1]*A[3,3]-A[1,1]*A[2,3]*b[3])/Det
      G=(A[1,1]*A[2,2]*b[3]+A[1,2]*b[2]*A[3,1]+b[1]*A[2,1]*A[3,2]-b[1]*A[2,2]*A[3,1]-A[1,2]*A[2,1]*b[3]-A[1,1]*b[2]*A[3,2])/Det
      aberror=0
      for (i=2;i<5;i++) {
         k=afplaneatoms[i]
         distplane=(-oldarr[k,1]*E-oldarr[k,2]*F+oldarr[k,3]-G)/(E^2+F^2+1)^.5;if (distplane<0) distplane=-distplane
         aberror=aberror+distplane
         }
      }
   conatom=afplaneatoms[1]
   distplane=(-oldarr[conatom,1]*E-oldarr[conatom,2]*F+oldarr[conatom,3]-G)/(E^2+F^2+1)^.5
   if (distplane<0) distplane=-distplane
   t=(oldarr[conatom,1]*E+oldarr[conatom,2]*F-oldarr[conatom,3]+G)/(E^2+F^2+1)
   planepoint[1]=oldarr[conatom,1]-t*E;planepoint[2]=oldarr[conatom,2]-t*F;planepoint[3]=oldarr[conatom,3]+t
   distcmass=((planepoint[1]-cmass[1])^2+(planepoint[2]-cmass[2])^2+(planepoint[3]-cmass[3])^2)^.5
   print "distplane",distplane,"t",t,"planepoint",planepoint[1],planepoint[2],planepoint[3],"distcmass",distcmass,"aberror",aberror >> "diagnostics"
   if (distcmass>1.4) {
      vector[1]=planepoint[1]-cmass[1];vector[2]=planepoint[2]-cmass[2];vector[3]=planepoint[3]-cmass[3]
      vector[1]=vector[1]*1.4/distcmass;vector[2]=vector[2]*1.4/distcmass;vector[3]=vector[3]*1.4/distcmass
      planepoint[1]=cmass[1]+vector[1];planepoint[2]=cmass[2]+vector[2];planepoint[3]=cmass[3]+vector[3];
      distcmass=((planepoint[1]-cmass[1])^2+(planepoint[2]-cmass[2])^2+(planepoint[3]-cmass[3])^2)^.5
      distplane=((planepoint[1]-oldarr[conatom,1])^2+(planepoint[2]-oldarr[conatom,2])^2+(planepoint[3]-oldarr[conatom,3])^2)^.5
      print "new distplane",distplane,"newplanepoint",planepoint[1],planepoint[2],planepoint[3],"newdistcmass",distcmass >> "diagnostics"
      }
   delX=oldarr[conatom,1]-planepoint[1];delY=oldarr[conatom,2]-planepoint[2];delZ=oldarr[conatom,3]-planepoint[3]
   if (applyforceplane==2) apforceplane=apforceplane*(distplane-apforceplaneX0)
   unitX=apforceplane*delX/distplane;unitY=apforceplane*delY/distplane;unitZ=apforceplane*delZ/distplane
   forceArr[conatom,1]=forceArr[conatom,1]-unitX;forceArr[conatom,2]=forceArr[conatom,2]-unitY;forceArr[conatom,3]=forceArr[conatom,3]-unitZ
   for (i=2;i<8;i++) {
      if (afplaneatoms[i]>.5) {
         platom=afplaneatoms[i]
         forceArr[platom,1]=forceArr[platom,1]+unitX/numplaneatoms;forceArr[platom,2]=forceArr[platom,2]+unitY/numplaneatoms;forceArr[platom,3]=forceArr[platom,3]+unitZ/numplaneatoms
         }
      }
   }

function setinterlockingsphereatom() {
#apply force to one of a series of atoms, whichever is closest to afatom[1]
   for (i=3;i<8;i++) {
      if (afatom[i]>0) {
         if(Distance(afatom[1],afatom[i])<Distance(afatom[1],afatom[2])) afatom[2]=afatom[i]
         }
      if (afatomB[i]>0) {
         if(Distance(afatomB[1],afatomB[i])<Distance(afatomB[1],afatomB[2])) afatomB[2]=afatomB[i]
         }
      if (afatomC[i]>0) {
         if(Distance(afatomC[1],afatomC[i])<Distance(afatomC[1],afatomC[2])) afatomC[2]=afatomC[i]
         }
      }
   }

function doapplyforce() {
# applyforce 1 puts a linear constant force.  
# applyforce 2 puts on a harmonic restoring force to apforceX0
   delX=oldarr[afatom[1],1]-oldarr[afatom[2],1];delY=oldarr[afatom[1],2]-oldarr[afatom[2],2];delZ=oldarr[afatom[1],3]-oldarr[afatom[2],3];
   distatoms=(delX^2+delY^2+delZ^2)^.5
   if (applyforce==2) apforce=apforce*(distatoms-apforceX0)
   if (applyforce==3) apforce=apforce*(distatoms-apforceX0) + apforce2*(distatoms-apforceX0)^2
   if (applyforce==4) apforce=apforce*(distatoms-apforceX0) + apforce2*(distatoms-apforceX0)^2 + apforce3*(distatoms-apforceX0)^3
   unitX=apforce*delX/distatoms;unitY=apforce*delY/distatoms;;unitZ=apforce*delZ/distatoms;
   forceArr[afatom[1],1]=forceArr[afatom[1],1]-unitX;forceArr[afatom[1],2]=forceArr[afatom[1],2]-unitY;forceArr[afatom[1],3]=forceArr[afatom[1],3]-unitZ
   forceArr[afatom[2],1]=forceArr[afatom[2],1]+unitX;forceArr[afatom[2],2]=forceArr[afatom[2],2]+unitY;forceArr[afatom[2],3]=forceArr[afatom[2],3]+unitZ
   }

function doapplyforceB() {
   delX=oldarr[afatomB[1],1]-oldarr[afatomB[2],1];delY=oldarr[afatomB[1],2]-oldarr[afatomB[2],2];delZ=oldarr[afatomB[1],3]-oldarr[afatomB[2],3];
   distatoms=(delX^2+delY^2+delZ^2)^.5
   if (applyforceB==2) apforceB=apforceB*(distatoms-apforceX0B)
   if (applyforceB==3) apforceB=apforceB*(distatoms-apforceX0B) + apforce2B*(distatoms-apforceX0B)^2
   if (applyforceB==4) apforceB=apforceB*(distatoms-apforceX0B) + apforce2B*(distatoms-apforceX0B)^2 + apforce3B*(distatoms-apforceX0B)^3
   unitX=apforceB*delX/distatoms;unitY=apforceB*delY/distatoms;;unitZ=apforceB*delZ/distatoms;
   forceArr[afatomB[1],1]=forceArr[afatomB[1],1]-unitX;forceArr[afatomB[1],2]=forceArr[afatomB[1],2]-unitY;forceArr[afatomB[1],3]=forceArr[afatomB[1],3]-unitZ
   forceArr[afatomB[2],1]=forceArr[afatomB[2],1]+unitX;forceArr[afatomB[2],2]=forceArr[afatomB[2],2]+unitY;forceArr[afatomB[2],3]=forceArr[afatomB[2],3]+unitZ
   }

function doapplyforceC() {
   delX=oldarr[afatomC[1],1]-oldarr[afatomC[2],1];delY=oldarr[afatomC[1],2]-oldarr[afatomC[2],2];delZ=oldarr[afatomC[1],3]-oldarr[afatomC[2],3];
   distatoms=(delX^2+delY^2+delZ^2)^.5
   if (applyforceC==2) apforceC=apforceC*(distatoms-apforceX0C)
   if (applyforceC==3) apforceC=apforceC*(distatoms-apforceX0C) + apforce2C*(distatoms-apforceX0C)^2
   if (applyforceC==4) apforceC=apforceC*(distatoms-apforceX0C) + apforce2C*(distatoms-apforceX0C)^2 + apforce3C*(distatoms-apforceX0C)^3
   unitX=apforceC*delX/distatoms;unitY=apforceC*delY/distatoms;;unitZ=apforceC*delZ/distatoms;
   forceArr[afatomC[1],1]=forceArr[afatomC[1],1]-unitX;forceArr[afatomC[1],2]=forceArr[afatomC[1],2]-unitY;forceArr[afatomC[1],3]=forceArr[afatomC[1],3]-unitZ
   forceArr[afatomC[2],1]=forceArr[afatomC[2],1]+unitX;forceArr[afatomC[2],2]=forceArr[afatomC[2],2]+unitY;forceArr[afatomC[2],3]=forceArr[afatomC[2],3]+unitZ
   }

function doempiricaldispersion() {
   EdispHtotal=0
   s6=empiricaldispersion
   for (i=1;i<=numAtoms;i++) {
      if (atSym[i]=="H") {c6[i]=0.14;r0[i]=1.001}
#     if (atSym[i]=="H") {c6[i]=0.16;r0[i]=1.11}
      if (atSym[i]=="He") {c6[i]=0.08;r0[i]=1.012}
      if (atSym[i]=="Li") {c6[i]=1.61;r0[i]=0.825}
      if (atSym[i]=="Be") {c6[i]=1.61;r0[i]=1.408}
      if (atSym[i]=="B") {c6[i]=3.13;r0[i]=1.485}
      if (atSym[i]=="C") {c6[i]=1.75;r0[i]=1.452}
#     if (atSym[i]=="C") {c6[i]=1.65;r0[i]=1.61}
      if (atSym[i]=="N") {c6[i]=1.23;r0[i]=1.397}
#     if (atSym[i]=="N") {c6[i]=1.11;r0[i]=1.55}
      if (atSym[i]=="O") {c6[i]=0.70;r0[i]=1.342}
#     if (atSym[i]=="O") {c6[i]=0.70;r0[i]=1.49}
      if (atSym[i]=="F") {c6[i]=0.75;r0[i]=1.287}
      if (atSym[i]=="Ne") {c6[i]=0.63;r0[i]=1.243}
      if (atSym[i]=="Na") {c6[i]=5.71;r0[i]=1.144}
      if (atSym[i]=="Mg") {c6[i]=5.71;r0[i]=1.364}
      if (atSym[i]=="Al") {c6[i]=10.79;r0[i]=1.639}
      if (atSym[i]=="Si") {c6[i]=9.23;r0[i]=1.716}
      if (atSym[i]=="P") {c6[i]=7.84;r0[i]=1.705}
      if (atSym[i]=="S") {c6[i]=5.57;r0[i]=1.683}
      if (atSym[i]=="Cl") {c6[i]=5.07;r0[i]=1.639}
#     if (atSym[i]=="Cl") {c6[i]=8.00;r0[i]=1.82}
      if (atSym[i]=="Ar") {c6[i]=4.61;r0[i]=1.595}
      if (atSym[i]=="K") {c6[i]=10.8;r0[i]=1.485}
      if (atSym[i]=="Ca") {c6[i]=10.8;r0[i]=1.474}
      if (atSym[i]=="Sc") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Ti") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="V") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Cr") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Mn") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Fe") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Co") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Ni") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Cu") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Zn") {c6[i]=10.8;r0[i]=1.562}
      if (atSym[i]=="Ga") {c6[i]=16.99;r0[i]=1.65}
      if (atSym[i]=="Ge") {c6[i]=17.10;r0[i]=1.727}
      if (atSym[i]=="As") {c6[i]=16.37;r0[i]=1.76}
      if (atSym[i]=="Se") {c6[i]=12.64;r0[i]=1.771}
      if (atSym[i]=="Br") {c6[i]=12.47;r0[i]=1.749}
      if (atSym[i]=="Pd") {c6[i]=24.67;r0[i]=1.639}
      if (atSym[i]=="I") {c6[i]=31.5;r0[i]=1.892}
      r0[i]=r0[i]*radiusmultiplier
      }
   for (i=1;i<numAtoms;i++) {
      for (j=i+1;j<=numAtoms;j++) {
         Rij=Distance(i,j)
         if (Rij<8) { #cutoff of 8 angstroms to save time - later this can be parameterized
#need to get units of force to Hartrees/Bohr, since that is the units of forceArr
            EdispK=Edisp(c6[i],c6[j],Rij,r0[i],r0[j])*1E6/4184 #in kcal/mol
            FdispK=Fdisp(c6[i],c6[j],Rij,r0[i],r0[j])*1E6/4184 #in kcal/mol per angstrom
            EdispH=EdispK/627.509
            EdispHtotal=EdispHtotal+EdispH
            FdispHB=FdispK*0.52917725/627.509
#           print i,j,Cij,Rij,r0[i],r0[j],fdmp,"     ",EdispK,FdispK,"     ",EdispH,FdispHB,EdispHtotal
            delX=oldarr[i,1]-oldarr[j,1];delY=oldarr[i,2]-oldarr[j,2];delZ=oldarr[i,3]-oldarr[j,3];
            unitX=FdispHB*delX/Rij;unitY=FdispHB*delY/Rij;;unitZ=FdispHB*delZ/Rij;
            forceArr[i,1]=forceArr[i,1]+unitX;forceArr[i,2]=forceArr[i,2]+unitY;forceArr[i,3]=forceArr[i,3]+unitZ
            forceArr[j,1]=forceArr[j,1]-unitX;forceArr[j,2]=forceArr[j,2]-unitY;forceArr[j,3]=forceArr[j,3]-unitZ
            }
         }
      }
   newPotentialE=newPotentialE+EdispHtotal
   }

function Edisp(c6i,c6j,rij,r0i,r0j) {
   cij=(c6i*c6j)^.5
   fdmp=1/(1+exp(-20*((rij/(r0i+r0j)-1))))
   return -s6*cij*fdmp/(rij^6) 
   }

function Fdisp(c6i,c6j,rij,r0i,r0j) {
   delta=0.001
   return (Edisp(c6i,c6j,rij-delta,r0i,r0j)-Edisp(c6i,c6j,rij+delta,r0i,r0j))/(2*delta)
   }

function dozeroatom() {
#routine to slowly move an atom toward the origin as set by a harmonic potential 
   multiple=0.99996
   oldarr[zeroatom,1]=multiple*oldarr[zeroatom,1]
   oldarr[zeroatom,2]=multiple*oldarr[zeroatom,2]
   oldarr[zeroatom,3]=multiple*oldarr[zeroatom,3]
   }

function dothermostat() {
#print out some things to vellist and do thermostat
# the damping in the thermostat is based on temperature based on old geo vs older geo
   if (diag<4) print "KEold",KEold,"desired temperature",temp,"apparent Temperature",apparentTemp >> "vellist"
   if (apparentTemp>temp) damping=thermostatmult
   if (apparentTemp<temp) damping=1/thermostatmult
   }

function doDRP() {
#routine for DRPs
   maxForce=0;oscillTest=0
   for (i=1;i<=numAtoms;i++) {
      for (j=1;j<=3;j++) {
# conversions here take force to J/angstrom, 1E20 converts to kg angstroms / s^2, then mult time (s^s) and divide by weight in kg to get angstroms
         forceArr[i,j]=1E20*forceArr[i,j]*627.509*(4184/(0.529177*avNum))*(timestep^2)/(weight[i]/(avNum*1000))
         oscillTest=oscillTest+forceArr[i,j]*oldForce[i,j]
         if (forceArr[i,j]>maxForce) maxForce=forceArr[i,j]
         if ((0-forceArr[i,j])>maxForce) maxForce=-forceArr[i,j]
         }
      if (i==1) printf("% .8f % .8f % .8f \n",forceArr[1,1],forceArr[1,2],forceArr[1,3])  > "oldAdjForces"
      if (i>1) printf("% .8f % .8f % .8f \n",forceArr[i,1],forceArr[i,2],forceArr[i,3])  >> "oldAdjForces"
      }
   print "oscillTest ",oscillTest >> "oldAdjForces"
   if (oscillTest<0) {
      maxAtomMove = maxAtomMove*0.5
      print maxAtomMove > "maxMove"
      }
   if (oscillTest>0) {
      maxAtomMove = maxAtomMove*1.2
      print maxAtomMove > "maxMove"
      }
   print "maxAtomMove ",maxAtomMove >> "oldAdjForces"
   forceMult=maxAtomMove/maxForce
   for (i=1;i<=numAtoms;i++) {
      for (j=1;j<=3;j++) {
         newarr[i,j]=oldarr[i,j]+forceMult*forceArr[i,j]
         }
      }
   }

function doVerlet() {
#normal routine for Verlet
   for (i=1;i<=numAtoms;i++) {
      for (j=1;j<=3;j++) {
# conversions here take force to J/angstrom, 1E20 converts to kg angstroms / s^2, then mult time (s^s) and divide by weight in kg to get angstroms
         forceArr[i,j]=1E20*forceArr[i,j]*627.509*(4184/(0.529177*avNum))*(timestep^2)/(weight[i]/(avNum*1000))
#        if ((diag>1) && (i==1)) print "i,weight[i],forceArr[i,1],forceArr[i,2],forceArr[i,3]" >> "diagnostics"
#        if (diag>1) print i,weight[i],forceArr[i,1],forceArr[i,2],forceArr[i,3] >> "diagnostics"
         newarr[i,j]=oldarr[i,j]+damping*(oldarr[i,j]-olderarr[i,j])+forceArr[i,j]
         if ((i==fixedatom1) || (i==fixedatom2) || (i==fixedatom3) || (i==fixedatom4)) newarr[i,j]=oldarr[i,j]
#turn around atoms outside the box
         if (boxon==1) {
            if (newarr[i,j]>boxsize) if (oldarr[i,j]>olderarr[i,j]) newarr[i,j]=oldarr[i,j]+damping*(olderarr[i,j]-oldarr[i,j])+forceArr[i,j]
            if (newarr[i,j]<-1*boxsize) if (oldarr[i,j]<olderarr[i,j]) newarr[i,j]=oldarr[i,j]+damping*(olderarr[i,j]-oldarr[i,j])+forceArr[i,j]
            }
         }
      }
#calculate the kinetic energy.  This is for the point prior to the current point.  Corrected calculation 
   for (at=1;at<=numAtoms;at++) {
      atomVel=(((olderarr[at,1]-newarr[at,1])^2 + (olderarr[at,2]-newarr[at,2])^2 +(olderarr[at,3]-newarr[at,3])^2)^.5)/2
      KEnew=KEnew+0.5*weight[at]*(atomVel^2)/((timestep^2)*conver1)
      }
      KEave=KEnew # we used to average with KEold but that is incorrect.  This is better.
      Etotal=newPotEK+KEave
#still basing apparent Temperature on velocities from old vs older, even though the KE now represents an average of old and new
      if (diag==4) print runpointnum,"KEave",KEave,"apparent Temperature",apparentTemp,"newPotEK",newPotEK,"Etotal",Etotal,"pressure in Atm",pressureAtm,"density in 0.9r",density >> "vellist"
   }

function writetraj() {
   print numAtoms >> "traj"
   print newPotentialE,title1,title2,title3,title4,"runpoint ",runpointnum,"runisomer ",isomernum >> "traj"
   for (i=1;i<=numAtoms;i++) {
      printf("%s %.7f %.7f %.7f",atSym[i],newarr[i,1],newarr[i,2],newarr[i,3]) >> "traj"
      print "" >> "traj"
      }
   }

function writecomfile() {
   print "%nproc=" processors
   print "%mem=" memory
   if (killcheck!=1) print "%chk=" checkpoint
   if (nonstandard==0) {
      print "#p " method " force scf=(xqc,maxconven=155,fulllinear,nosym) "
      if (meth2=="unrestricted") print "guess=mix" #for unrestricted calculations
      if (meth2=="read") print "guess=tcheck" #for reading orbitals from check, sometimes faster, sometimes not
      if (length(meth3)>2) print meth3
      if (length(meth4)>2) print meth4
      }
   if (nonstandard==1) {
      print "# "
      print "nonstd"
      system("cat nonstandard")
      }
   print ""
   print  title1,title2,title3,title4
   print "runpoint ",runpointnum
   print "runisomer ",isomernum
   if (DRP==1) {
      print "maxForce and forceMult and maxAtomMove",maxForce,forceMult,maxAtomMove
      print "maxForce and forceMult and maxAtomMove",maxForce,forceMult,maxAtomMove >> "movelist"
      }
   print ""
   if (oniommult==0) print charge,multiplicity
   if (oniommult>0) print charge,multiplicity,oniomcharge,oniommult
   for (i=1;i<=numAtoms;i++) {
      printf("%s %.7f %.7f %.7f",atSym[i],newarr[i,1],newarr[i,2],newarr[i,3])
      if ((i>highlevel) && (i<=highlevel+linkatoms)) printf(" %s","M H")
      if (i>(highlevel+linkatoms)) printf(" %s","M")
      print ""
      }
   print ""
   if (length(meth5)>2) print meth5
   if (length(meth6)>2) print meth6
   if (methodfilelines>=1) {
      for (i=1;i<=methodfilelines;i++) {
         getline < "methodfile"
         print $0
         }
      }
   if ((nmrtype>0) && (nmrdo==1)) {
      print "--link1--"
      print "%nproc=" processors
      print "%mem=" memory
      print "%chk=" checkpoint
      print "# " nmrmethod " nmr=giao geom=check"
      if (nmrmethod==method) print "guess=tcheck"
      if (length(meth7)>2) print meth7
      print ""
      print title1,title2,title3,title4
      print "runpoint ",runpointnum
      print "runisomer ",isomernum
      print ""
      print charge,multiplicity
      }
   print ""
   if ((nmrtype>1) && (nmrdo==1)) {
      print "--link1--"
      print "%nproc=" processors
      print "%mem=" memory
      print "%chk=" checkpoint
      print "# " nmrmethod2 " nmr=giao geom=check"
      if (length(meth7)>2) print meth7
      print ""
      print title1,title2,title3,title4
      print "runpoint ",runpointnum
      print "runisomer ",isomernum
      print ""
      print charge,multiplicity
      }
   print ""
   if ((nmrtype>2) && (nmrdo==1)) {
      print "--link1--"
      print "%nproc=" processors
      print "%mem=" memory
      print "%chk=" checkpoint
      print "# " nmrmethod3 " nmr=giao geom=check"
      if (length(meth7)>2) print meth7
      print ""
      print title1,title2,title3,title4
      print "runpoint ",runpointnum
      print "runisomer ",isomernum
      print ""
      print charge,multiplicity
      }
   print ""
   if ((nmrcc==1) && (nmrdo==1)) {
      print "CCSD(T) NMR calculation" > "ZMAT"
      for (i=1;i<=numAtoms;i++) {
         printf("%s %.7f %.7f %.7f",atSym[i],newarr[i,1],newarr[i,2],newarr[i,3]) >> "ZMAT"
         print "" >> "ZMAT"
         }
      print "" >> "ZMAT"
      print "*ACES2(CALC=CCSD[T],PROP=NMR,BASIS=dzp" >> "ZMAT"
      print "ABCDTYPE=AOBASIS,TREAT_PERT=SEQUENTIAL,CC_PROG=ECC" >> "ZMAT"
      print "COORD=CARTESIAN" >> "ZMAT"
      print "MEM_UNIT=GB,MEMORY=2)" >> "ZMAT"
      print "" >> "ZMAT"
      }
   }
 
