BEGIN {
# June 2018 organized into functions partially
# 2014 - avoids bug with a box on, so that starts without modes use input geometry, not standard orientation
# aug 2013 summary of changes
#includes molecular rotation, ability to do multiple NMR calculations, ONIOM with link atoms, 
#nonstandard routes, handling of linear molecules using geometry linear, fixed but with atoms over 99 but
#bug varies with version of Gaussian, randomization based on PROCINFO (solved many problems), added initialDiss 3 for random
#phase of normal modes
# Aut 2010 changes classicalSpacing to 2 and upped possible excited states to 4000
# Jan 2009 - a number of little changes to improve reporting, precision, etc, specification of displacement on particular modes
# Jan 2009 cannonball trajectories.  adds desired energy to initial velocities based on file cannontraj, so one can shoot toward a ts
# updated Nov 2008 to incorporate running DRPs
# updated Nov 2008 to allow for start without an initial freq calc using classical = 2
# updated Aug 2008 added to atom list to handle a large number of atoms without changes needed
# updated June 2008 to incorportate new method for choosing displacements with initialdis 2
# updated Jan 17 2008 - bug fix for > 99 atoms, 300 excitations of low modes possible
# version August 2007 - incorporates classical trajectory calculation option
#also allows listing of number of imaginary frequencies
# version Sept 16, 2005 - incorportates searchdir but not yet rotation
# now reads random numbers from temp811, starting at a random place
# The input files are generated before this and are tempfreqs, tempredmass,
# tempfrc, tempmodes, and tempstangeos.
# It will count the number of atoms.  

initializeparameters()
initializeconstants()
readprogdynconf()
if (readIsomerNumber>-1) {
   readGeoRecord()
   alldone=1
   exit
   }
if (diag>=1) diagnosticsA()
getstangeos() #defines numAtoms, atNum[], geoArr[1-numAtoms,1-3], geoArrOrig[1-numAtoms,1-3](same as geoArr initially), zeros velArr
print numAtoms #output the number of atoms, used in many routines
print "numAtoms=" numAtoms >> "debug.log"
getatomsAndWeights() # put in atomic symbols and atomic weights - assigns a default mass but then reads it from tempmasses when possible
getFreqs() # defines numFreq, freq[] (scaled and adjusted in ways), redMass[], frc[]
if (classical!=2) getModes() # defines mode[freqNum, atom, 1-3]
startRandom() # defines starting point on file temp811, randArr[1-numFreq], randArrB[1-numfreq], randArrC[1-numFreq], randArrR[1-6], randArrD[1-numFreq],randArrE[3*numAtoms]
setModeEnergies() # defines zpe[], zpeK[], vibn[], modeEn[], modeEnK[] for each mode and desiredModeEnK desired total energy desired for molecule
setQMrandom() # defines randArrQM[i], a random position based on the QM psi**2 to use for a QM displacement choice
setModeShifts() #defines shift[i] for each mode, defines potentialEn[], potentialEnK[]
getVelocities() # defines velArr[], kinEn[i]
if (anharmonic==1) setAnharmonicShifts()
if (readdzdm==1) readDZDM()
if (readdzdm==0) calcdzdm()
if (classical!=2) shiftStructure() # moves the initial geometry by shift[i], changes geoArr[]
calcEinModes() # defines KEinitmodes, just the kinetic E in the vibrational modes, and PEinitmodes 
if (rotationmode>0) addMolecularRotation() # changes velArr using a thermal random rotation
if (cannonball>0) {
   readCannonBall() # defines cannArr[1-numAtoms,1-3]
   doCannonBall()
   }
# output the geometry and weights
for (j=1;j<=numAtoms;j++) {
   printf("%2s % .7f % .7f % .7f %9.5f \n",atSym[j],geoArr[j,1],geoArr[j,2],geoArr[j,3],atWeight[j])
   }
#output the velocities and calculate the total kinetic energy overall
KEinittotal=0
for (j=1;j<=numAtoms;j++) {
   KEinittotal=KEinittotal + 0.5*atWeight[j]*(velArr[j,1]^2 + velArr[j,2]^2 + velArr[j,3]^2)/((timestep^2)*conver1)
   printf("% .8f % .8f % .8f \n",velArr[j,1],velArr[j,2],velArr[j,3])
   }

#additional info added to file will not affect the trajectories but will keep a record and be good for analysis
if (classical!=2) {
   for (i=1;i<=numFreq;i++) {
      if (initialDis==0) printf("%.6f   % .6f    %4i    % 1.4e       % .6f %1i\n", randArr[i], randArrB[i], vibN[i], vel[i], shift[i], disMode[i])
      if (initialDis==1) printf("%.6f   % .6f    %4i    % 1.4e       % .6f %1i\n", randArr[i], randArrC[i], vibN[i], vel[i], shift[i], disMode[i])
      if (initialDis==2) printf("%.6f   % .6f    %4i    % 1.4e       % .6f %1i\n", randArr[i], randArrD[i], vibN[i], vel[i], shift[i], disMode[i])
      if (initialDis==3) printf("%.6f   % .6f    %4i    % 1.4e       % .6f %1i % .6f\n", randArr[i], randArrC[i], vibN[i], vel[i], shift[i], disMode[i], sin(randArrC[i]*3.141592*2))
      if (initialDis==4) printf("%.6f   % .6f    %4i    % 1.4e       % .6f %1i\n", randArr[i], randArrQM[i], vibN[i], vel[i], shift[i], disMode[i])
      }
   }
print "temp ",temp
print "initialDis",initialDis
print "classical",classical
print "timestep",timestep
print "numimag",numimag
OFMT = "%.3f"
print "Total mode energy desired=",desiredModeEnK,"  potential Energy desired", PEinitmodes
print "KE initial from modes=",KEinitmodes,"   KE initial total=",KEinittotal,"   Rotational Energy desired=",rotEdesired
if (cannonball>0) print "cannonball",cannonball,"  cannon Energy=",KEinittotal-KEinitmodes
if (boxon>0) print "boxsize",boxsize
if (DRP>0) print "DRP",DRP,"   maxAtomMove",maxAtomMove
if (DRP>0) print maxAtomMove > "maxMove"
}  ############################# ************************** End of BEGIN ************************

/Zero-point correction/ {zpeGauss=$3}
/zero-point Energies/ {zpePlusE=$7}
END {
if (alldone==1) exit
zpeGaussK=zpeGauss*627.509
potentialE=zpePlusE - zpeGauss
OFMT = "%.6f"
print "Gaussian zpe=",zpeGauss,"or",zpeGaussK,"kcal/mol  E + zpe=",zpePlusE,"  potential E=",potentialE
print "" #will use blank line to mark end of geoPlusVel file
}

# default parameters, including quassiclassical, no displacements, transition state, not a DRP
# do not change these - rather, change progdyn.conf to set the parameters
function initializeparameters() {
   initialDis=0; timestep=1E-15; scaling=1.0; temp=298.15
   classical=0; numimag=1; DRP=0; cannonball=0
   memory=20000000
   diag=1; checkpoint="g16.chk"; searchdir="positive"; boxon=0
   boxsize=10; maxAtomMove=0.1; title1="you"; title2="need"
   title3="a"; title4="progdyn.conf"; processors=1; highlevel=99999; linkatoms=0
   damping=1;nonstandard=0;geometry="nonlinear";nonstandard=0
   nmrtype=0;nmrevery=9999999;nmrcc=0;nmrrand=0;nmrdo=0
   thermostat=0;thermostatemult=1.00
   oniomcharge=0; oniommult=0
   applyforce=0; applyforceB=0; applyforceC=0; zeroatomon=0
   sphereon=0; spheresize=999; sphereforceK=0.01
   empiricaldispersion=0; radiusmultiplier=1.25
   conver1=4.184E26 #dividing by this converts amu angs^2 /s^2 to kcal/mol
   geometry="nonlinear";rotationmode=0
   readdzdm=0; readGeoFile=""; readIsomerNumber=-1; alldone=0
   }

function initializeconstants() {
   for (i=1;i<=10000;i++) {disMode[i]=-1}
   i=1;j=1;k=1
   c=29979245800; h=6.626075E-34; avNum=6.0221415E23
   RgasK=0.00198588; RgasJ=8.31447; pi=3.14159265359
   numAtoms=0; atomnumber=0; classicalSpacing=2
   zpeGauss=0; zpeGaussK=0; zpePlusE=0; potentialE=0
   conver1=4.184E26 #dividing by this converts amu angs^2 /s^2 to kcal/mol
   OFS="   "
   }

# read progdyn.conf for configuration info
function readprogdynconf() {
   blankLineTester=10
   while (blankLineTester>1) {
      getline < "progdyn.conf"
      if ($1=="method") method=$2
      if ($1=="method2") meth2=$2
      if ($1=="charge") charge=$2
      if ($1=="multiplicity") multiplicity=$2
      if ($1=="oniomchargemult") {
         oniomcharge=$2
         oniommult=$3
         }
      if ($1=="memory") memory=$2
      if ($1=="processors") processors=$2
      if ($1=="checkpoint") checkpoint=$2
      if ($1=="timestep") timestep=$2
      if ($1=="diagnostics") diag=$2
      if ($1=="initialdis") initialDis=$2
      if ($1=="scaling") scaling=$2
      if ($1=="searchdir") searchdir=$2
      if ($1=="temperature") temp=$2
      if ($1=="thermostat") thermostat=$2
      if ($1=="thermostatmult") thermostatmult=$2
      if (thermostatmult>1) thermostatmult=1/thermostatmult
      if ($1=="classical") classical=$2
      if ($1=="numimag") numimag=$2
      if ($1=="geometry") geometry=$2
      if ($1=="cannonball") cannonball=$2
      if ($1=="displacements") disMode[$2]=$3
      if ($1=="anharmonicmode") {
         anharmonic=1
         anharmonicmode[$2]=1
         anharmk2[$2]=$3
         anharmk3[$2]=$4
         }
      if ($1=="controlphase") controlPhase[$2]=$3
      if ($1=="rotationmode") rotationmode=$2
      if ($1=="method3") meth3=$2
      if ($1=="method4") meth4=$2
      if ($1=="method5") meth5=$2
      if ($1=="method6") meth6=$2
      if ($1=="method7") meth7=$2
      if ($1=="highlevel") highlevel=$2
      if ($1=="linkatoms") linkatoms=$2
      if ($1=="fixedatom1") fixedatom1=$2
      if ($1=="fixedatom2") fixedatom2=$2
      if ($1=="fixedatom3") fixedatom3=$2
      if ($1=="fixedatom4") fixedatom4=$2
      if ($1=="boxon") boxon=$2
      if ($1=="boxsize") boxsize=$2
      if ($1=="sphereon") sphereon=$2
      if ($1=="spheresize") spheresize=$2
      if ($1=="sphereforce") sphereforceK=$2
      if ($1=="DRP") DRP=$2; if (DRP==1) classical=2 #this lets one start a DRP from a point that is not a freq calc
      if ($1=="maxAtomMove") maxAtomMove=$2
      if ($1=="methodfile") methodfilelines=$2
      if ($1=="killcheck") killcheck=$2
      if ($1=="empiricaldispersion") empiricaldispersion=$2
      if ($1=="radiusmultiplier") radiusmultiplier=$2
      if ($1=="damping") damping=$2
      if ($1=="NMRmethod") nmrmethod=$2
      if ($1=="NMRmethod2") nmrmethod2=$2
      if ($1=="NMRmethod3") nmrmethod3=$2
      if ($1=="NMRtype") nmrtype=$2
      if ($1=="NMRevery") nmrevery=$2
      if ($1=="NMRrand") nmrrand=$2
      if ($1=="loadlimit") loadlimit=$2
      if ($1=="NMRcc") nmrcc=$2
      if ($1=="nonstandard") nonstandard=$2
      if ($1=="readdzdm") readdzdm=1
      if ($1=="applyforce") {
         applyforce=$2; apforce=$3; apforceX0=$4; apforce2=$5; apforce3=$6
         }
      if ($1=="applyforceB") {
         applyforceB=$2; apforceB=$3; apforceX0B=$4; apforce2B=$5; apforce3B=$6
         }
      if ($1=="applyforceC") {
         applyforceC=$2; apforceC=$3; apforceX0C=$4; apforce2C=$5; apforce3C=$6
         }
      if ($1=="afatoms") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatom[i]=$(i+1)
            }
         }
      if ($1=="afatomsB") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatomB[i]=$(i+1)
            }
         }
      if ($1=="afatomsC") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatomC[i]=$(i+1)
            }
         }
      if ($1=="applyforceplane") {
         applyforceplane=$2; apforceplane=$3; apforceplaneX0=$4
         }
      if ($1=="afplaneatoms") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afplaneatoms[i]=$(i+1)
            }
         }
      if ($1=="zeroatom") {
         zeroatomon=1
         zeroatom=$2
         }
      if ($1=="title") {
         title1=$2
         title2=$3
         title3=$4
         title4=$5
         }
      if ($1=="readGeoRecord") {
         readGeoFile=$2
         readIsomerNumber=$3
         }
      blankLineTester=length($0)
      }
   }

function diagnosticsA() {
   print "***************** starting proggen *****************" >> "diagnostics"
   print "method,charge,multiplicity,memory" >> "diagnostics"
   print method,charge,multiplicity,memory >> "diagnostics"
   print "processors,checkpoint,title,initialdis,timestep,scaling,temperature" >> "diagnostics"
   print processors,checkpoint,title1,title2,title3,title4,initialDis,timestep,scaling,temp >> "diagnostics"
   print "classical,numimag,highlevel,boxon,boxsize,DRP,maxAtomMove,cannonball" >> "diagnostics"
   print classical,numimag,highlevel,boxon,boxsize,DRP,maxAtomMove,cannonball >> "diagnostics"
   }

function getstangeos() {
# note that this picks out the last geometry in a file, assuming
# that if there is an optimization followed by a freq, nothing else follows
# kludgy - repeats last line twice - must be a better way
   do {
      getline < "tempstangeos"
      if (oldline==$0) $0=""
      oldline=$0
      atom = $1
      if (atom>numAtoms) numAtoms=atom
      atNum[atom]=$2
      geoArr[atom,1]=$4; geoArr[atom,2]=$5; geoArr[atom,3]=$6
      geoArrOrig[atom,1]=$4; geoArrOrig[atom,2]=$5; geoArrOrig[atom,3]=$6
      velArr[atom,1]=0; velArr[atom,2]=0; velArr[atom,3]=0
      }
   while (length($0) > 0)
   }

function getatomsAndWeights() {
# put in atomic symbols and atomic weights - assigns a default mass but then reads it from tempmasses when possible
   for (i=1;i<=numAtoms;i++) {
      getline < "tempmasses"
      if (atNum[i]==1) {atSym[i]="H";atWeight[i]=1.00783}
      if (atNum[i]==2) {atSym[i]="He";atWeight[i]=4.0026}
      if (atNum[i]==3) {atSym[i]="Li";atWeight[i]=6.941}
      if (atNum[i]==4) {atSym[i]="Be";atWeight[i]=9.012}
      if (atNum[i]==5) {atSym[i]="B";atWeight[i]=10.811}
      if (atNum[i]==6) {atSym[i]="C";atWeight[i]=12.}
      if (atNum[i]==7) {atSym[i]="N";atWeight[i]=14.007}
      if (atNum[i]==8) {atSym[i]="O";atWeight[i]=15.9994}
      if (atNum[i]==9) {atSym[i]="F";atWeight[i]=18.9984}
      if (atNum[i]==10) {atSym[i]="Ne";atWeight[i]=20.1797}
      if (atNum[i]==11) {atSym[i]="Na";atWeight[i]=22.989}
      if (atNum[i]==12) {atSym[i]="Mg";atWeight[i]=24.305}
      if (atNum[i]==13) {atSym[i]="Al";atWeight[i]=26.98154}
      if (atNum[i]==14) {atSym[i]="Si";atWeight[i]=28.0855}
      if (atNum[i]==15) {atSym[i]="P";atWeight[i]=30.9738}
      if (atNum[i]==16) {atSym[i]="S";atWeight[i]=32.066}
      if (atNum[i]==17) {atSym[i]="Cl";atWeight[i]=35.4527}
      if (atNum[i]==18) {atSym[i]="Ar";atWeight[i]=39.948}
      if (atNum[i]==19) {atSym[i]="K";atWeight[i]=39.0983}
      if (atNum[i]==20) {atSym[i]="Ca";atWeight[i]=40.078}
      if (atNum[i]==21) {atSym[i]="Sc";atWeight[i]=44.96}
      if (atNum[i]==22) {atSym[i]="Ti";atWeight[i]=47.867}
      if (atNum[i]==23) {atSym[i]="V";atWeight[i]=50.94}
      if (atNum[i]==24) {atSym[i]="Cr";atWeight[i]=51.9961}
      if (atNum[i]==25) {atSym[i]="Mn";atWeight[i]=54.938}
      if (atNum[i]==26) {atSym[i]="Fe";atWeight[i]=55.845}
      if (atNum[i]==27) {atSym[i]="Co";atWeight[i]=58.933}
      if (atNum[i]==28) {atSym[i]="Ni";atWeight[i]=58.693}
      if (atNum[i]==29) {atSym[i]="Cu";atWeight[i]=63.546}
      if (atNum[i]==30) {atSym[i]="Zn";atWeight[i]=65.38}
      if (atNum[i]==31) {atSym[i]="Ga";atWeight[i]=69.723}
      if (atNum[i]==32) {atSym[i]="Ge";atWeight[i]=72.64}
      if (atNum[i]==33) {atSym[i]="As";atWeight[i]=74.9216}
      if (atNum[i]==34) {atSym[i]="Se";atWeight[i]=78.96}
      if (atNum[i]==35) {atSym[i]="Br";atWeight[i]=79.904}
      if (atNum[i]==46) {atSym[i]="Pd";atWeight[i]=106.42}
      if (atNum[i]==53) {atSym[i]="I";atWeight[i]=126.90447}
# gets actual weight from freqinHP when possible so a prior calc with readisotopes gets you isotopic substitution
      if ((i<10000) && ($9>0)) atWeight[i]=$9
#  if ((i>99) && ($8>0)) atWeight[i]=$8

      if ((diag>1) && (i==1)) print "atNum[i],atSym[i],atWeight[i],geoArr[i,1],geoArr[i,2],geoArr[i,3]" >> "diagnostics"
      if (diag>1) print atNum[i],atSym[i],atWeight[i],geoArr[i,1],geoArr[i,2],geoArr[i,3] >> "diagnostics"
      }
   }

function getFreqs() {
# read in frequencies, scale them, read in Reduced masses, read in force 
#constants, replace negative frequencies by 2 wavenumbers
   numFreq=3*numAtoms-6
   if (geometry=="linear") numFreq=3*numAtoms-5
   $0=""
   getline < "numFreq.txt"
   numFreq=$0
   print "numFreq=" numFreq >> "debug.log"
   for (i=1;i<=numFreq;i++) {
      $0=""
      getline < "tempfreqs"
      freq[i]=$0*scaling
      if (freq[i]<classicalSpacing) freq[i]=classicalSpacing #replace negative freqs and <classicalSpacing by classicalSpacing wavenumbers, defaulted at 2 wavenumbers
      }
   for (i=1;i<=numFreq;i++) {
      $0=""
      getline < "tempredmass"
      redMass[i]=$0
      if (redMass[i]=="") redMass[i]=1.
      }
   for (i=1;i<=numFreq;i++) {
      $0=""
      getline < "tempfrc"
      frc[i]=$0
      if (frc[i]=="") frc[i]=0.0001
      if (frc[i]==0) frc[i]=0.0001
      if ((diag>1) && (i==1)) print "freq[i],redMass[i],frc[i]" >> "diagnostics"
      if (diag>1) print freq[i],redMass[i],frc[i] >> "diagnostics"
      }
   }

function getModes() {
# read in the modes - note that trajectories always need a freq calc with freq=hpmodes unless classical=2
   if (classical!=2) {
      for (i=1;i<=numFreq;i+=5) {
         for (j=1;j<=(3*numAtoms);j++) {
            getline < "tempmodes"
            mode[i,$2,$1]=$4; mode[i+1,$2,$1]=$5; mode[i+2,$2,$1]=$6; mode[i+3,$2,$1]=$7; mode[i+4,$2,$1]=$8
            }
         }
      }
   if (diag>2) {for (i=1;i<=numFreq;i++) {print mode[i,1,1],mode[i,1,2],mode[i,1,3] >> "modesread"}}
   }

function readCannonBall() {
# if doing a cannonball trajectory, read in the vector
   if (cannonball>0) {
      for (i=1;i<=numAtoms;i++) {
         getline < "cannontraj"
         cannonArr[i,1]=$1; cannonArr[i,2]=$2; cannonArr[i,3]=$3
         }
      }
   }

function startRandom() {
# collect a series of random numbers from file temp811, generated from an outside random number generator called by prodynstarterHP
# read from temp811, starting at a random place
   srand(PROCINFO["pid"]); tester=rand()*1000
   for (i=1;i<=tester;i++) getline < "temp811"
   for (i=1;i<=numFreq;i++) {
      getline < "temp811"; randArr[i]=$1
      getline < "temp811"; randArrB[i]=$1
      getline < "temp811"; randArrC[i]=$1
      }
   for (i=1;i<=6;i++) {
      getline < "temp811"; randArrR[i]=$1
      }
# for a QM-like distribution for a harmonic oscillator in its ground state, we want to generate a set of random numbers
# between -1 and 1 weighted such that numbers toward the center are properly more common
   i=1
   while (i<=numFreq) {
      if ((initialDis==2) || (disMode[i]==2)) {
         getline < "temp811"
         tempNum=2*($1-.5)
         prob=exp(-(tempNum^2))
         getline < "temp811"
         if ($1<prob) {
            randArrD[i]=tempNum
            i++
            }
         }
      if ((initialDis!=2) && (disMode[i]!=2)) i++
      }
   # to start without normal modes or frequencies we need to just pick a random direction for the motion of each atom, requiring 3N random numbers
   for (i=1;i<=numAtoms;i++) {
      for (j=1;j<=3;j++) {
      getline < "temp811"
      if ($1>0.5) randArrE[i,j]=1
      if ($1<.5) randArrE[i,j]=-1
         }
      }
   }

function setModeEnergies() {
# determine energy in each normal mode
   desiredModeEnK=0
   for (i=1;i<=numFreq;i++) {
      zpeJ[i]=0.5*h*c*freq[i]       #units J per molecule, # the zpe is not used when classical but the spacing can be used
      zpeK[i]=zpeJ[i]*avNum/4184    #units kcal/mol
      if ((classical==1) || (freq[i]<=classicalSpacing)) {   # treat all modes <=classicalSpacing cm-1 as classical
         modeEnK[i]=-RgasK*temp*log(randArr[i]) # gives a classical distribution of energies averaging RT
         vibN[i]=modeEnK[i]/(2*zpeK[i]) # the vibN is not an integer for classical vibrations
         modeEn[i]=zpeJ[i]*1E18*2*vibN[i] # units here are mDyne Ansgroms for compatability with Gaussian force constants
         }
      if ((classical!=1) && (freq[i]>classicalSpacing)) {
         if (temp<10) vibN[i]=0 # not right at temp<10, which will act like 0 K
         if (temp>=10) {
            zpeRat[i]=exp((-2*zpeK[i])/(RgasK*temp))
            if (zpeRat[i]==1) zpeRat[i]=.99999999999
            Q[i]=1/(1-zpeRat[i])
            newRand=randArr[i]
            vibN[i]=0
            tester=1/Q[i]
#        get up to 1750 excitations of modes >2 cm-1.  This should be plenty for ordinary temperatures, with a ceiling of about 10 kcal/mol
            for (j=1;j<=(1750*zpeRat[i]+2);j++) {
               if (newRand>tester) vibN[i]++
               tester=tester+((zpeRat[i]^j)/Q[i])
               }
            }
         modeEn[i]=(zpeJ[i]*1E18)*(2*vibN[i]+1) # units here are mDyne Ansgroms for compatability with Gaussian force constants
         modeEnK[i]=zpeK[i]*(2*vibN[i]+1)
         }
      if ((classical==4) && (i>1)) {
         modeEnK[i]=0                          #this lets you turn off the energy in modes outside of 1 for single-trajectory study
         modeEn[i]=0
         vibN[i]=0
         }
      desiredModeEnK=desiredModeEnK + modeEnK[i]
      #print zpeK[i], zpeJ[i], modeEnK[i], modeEn[i], vibN[i]
      }
   }

function setQMrandom() {
   i=1
   while (i<=numFreq) {
      getline < "temp811"
      tempNum=2*($1-.5)
      prob=psi2(vibN[i],tempNum)
      getline < "temp811"
#     print "i",i,"vibN[i]",vibN[i],"tempNum",tempNum,"newrand",$1,"prob",prob
      if ($1<prob) {
         randArrQM[i]=tempNum
         i++
         }
      }
#  print randArrQM[i]
   }

function psi2(n,myrand) { # n is the vibrational state, myrand is my trial displacement 
   if (n>50) n=50 # by this point the distribution is approaching classical, and anyway running into problems of numerical stability
   n = int(n)
   thepsi2=(2^(-n))*(pi^-0.5)
   r=myrand*(2*n+1)^0.5
   thepsi2=thepsi2*exp((-r^2))
   thei=int((n/2))
   if (n==0) Her=1
   if (n>0) {
      Her=0
      for (m=0;m<=thei;m++) {
         thez=((2*r)^(n-2*m)/factorial(m))/factorial(n-2*m)
         Her = Her + thez*(-1)^m
         } 
      } 
   Her=Her*Her
   #thepsi2=Her*thepsi2*factorial(n)*1.75*(2*n+1)^0.2 # scaled value that wastes fewer random numbers
   thepsi2=Her*thepsi2*factorial(n)
   return thepsi2
   }

function factorial(input) {
   myindex=1; fact=1
   for (myindex=1;myindex<=input;myindex++) {
      fact=fact*myindex
      }
   return fact
   }


function setModeShifts() {
# figure out maximum classical shift and then actual shift
   for (i=1;i<=numFreq;i++) {
      maxShift[i]=(2*modeEn[i]/frc[i])^0.5
      if (initialDis==4) shift[i]=maxShift[i]*randArrQM[i] # a QM-correct distribution bounded by the classical limits of the wavefunction
      if (initialDis==3) shift[i]=maxShift[i]*sin(randArrC[i]*3.141592*2) # initialDis 3 means random phase of normal mode
      if (initialDis==2) shift[i]=maxShift[i]*randArrD[i] # a Gaussian shift that resembles ground-state harmonic oscillator QM
      if (initialDis==1) shift[i]=maxShift[i]*(2*(randArrC[i]-0.5)) #purely random displacement, linearly distributed among displacements
      if (initialDis==0) shift[i]=0
# lines below allow for setting of displacement mode for individual modes when set by inputting disMode
      if (disMode[i]==4) shift[i]=maxShift[i]*randArrQM[i]
      if (disMode[i]==3) shift[i]=maxShift[i]*sin(randArrC[i]*3.141592*2)
      if (disMode[i]==2) shift[i]=maxShift[i]*randArrD[i]
      if (disMode[i]==1) shift[i]=maxShift[i]*(2*(randArrC[i]-0.5))
      if (disMode[i]==10) shift[i]=0 #kept for backward compatability
      if (disMode[i]==0) shift[i]=0
# no displacements along imaginary frequencies and very low ones - employing a shift can give you initial weird geometries
      if (freq[i]<10) shift[i]=0
      if (numimag==1) shift[1]=0
      if (numimag==2) shift[2]=0
#diagnostics
      if ((diag>1) && (i==1)) print "zpeJ[i],zpeK[i],zpeRat[i],Q[i],vibN[i],modeEn[i],maxShift[i],shift[i]" >> "diagnostics"
      if (diag>1) print zpeJ[i],zpeK[i],zpeRat[i],Q[i],vibN[i],modeEn[i],maxShift[i],shift[i] >> "diagnostics"
      potentialEn[i]=0.5*frc[i]*shift[i]^2 # same units as modeEn
      potentialEnK[i]=potentialEn[i]*avNum/(4184*1E18)
      }
   }

function getVelocities() {
   for (i=1;i<=numFreq;i++) {
      kinEn[i]=100000*(modeEn[i]-potentialEn[i])  # the 100000 converts to g angstrom^2 s^2
      vel[i]=(2*kinEn[i]/(redMass[i]/avNum))^0.5        # in angstrom / s
#use searchdir in progdyn.conf to control the direction for trajectories started from a saddle point
      if (numimag>1) numimag=1  #only the first freq can be sent in the searchdir direction, the rest go in a random direction
      if (i>numimag) {
         if (randArrB[i]<0.5) vel[i]=-vel[i]
         }
      if (i==numimag) {
         if (searchdir=="negative") vel[i]=-vel[i]
         }
      if ((diag>1) && (i==1)) print "vel[i]" >> "diagnostics"
      if (diag>1) print vel[i] >> "diagnostics"
      }
# if controlphase is being used, set the velocity on particular modes as positive or negative as requested
   for (i=1;i<=numFreq;i++) {
      if ((controlPhase[i]=="positive") && (vel[i]<0)) vel[i]=-vel[i]
      if ((controlPhase[i]=="negative") && (vel[i]>0)) vel[i]=-vel[i]
      }
# multiply each of the modes by its velocity and add them up
# Do not do this if classical=2
   if (classical!=2) {
      for (i=1;i<=numFreq;i++) {
         for (j=1;j<=numAtoms;j++) {
            for (k=1;k<=3;k++) {
               velMode[i,j,k]=mode[i,j,k]*vel[i]*timestep
               velArr[j,k]=velArr[j,k]+velMode[i,j,k]
               }
            }
         }
      }
# to start without normal modes or frequencies we figure out the energy per atom based on 1/2RT in degree of freedom
   if (classical==2) {
# to avoid a bug with a box on, starts without modes should use the input geometry, not the standard
      do {
         getline < "tempinputgeos"
         if (oldline==$0) $0=""
         oldline=$0
         atom = $1
         geoArr[atom,1]=$4; geoArr[atom,2]=$5; geoArr[atom,3]=$6
         geoArrOrig[atom,1]=$4; geoArrOrig[atom,2]=$5; geoArrOrig[atom,3]=$6
         }
      while (length($0) > 0)
      degFreedomEnK=temp*RgasK
      degFreedomEnJ=degFreedomEnK/(avNum/4184)
      cartEn=degFreedomEnJ*1E18
      kinEnCart=100000*cartEn
#print degFreedomEnK, degFreedomEnJ, cartEn, kinEnCart
      for (i=1;i<=numAtoms;i++) {
         for (j=1;j<=3;j++) {
            velArr[i,j]=randArrE[i,j]*timestep*(2*kinEnCart/(atWeight[i]/avNum))^0.5
            if (DRP==1) velArr[i,j]=0
            }
         }
      }
   }

function setAnharmonicShifts() {
   for (i=1;i<=numFreq;i++) {
      if (anharmonicmode[i]==1) {
         PEanharm=anharmk2[i]*shift[i]^2 + anharmk3[i]*shift[i]^3
#        print i, PEanharm, potentialEnK[i],"     difference",PEanharm-potentialEnK[i]
         while (PEanharm < potentialEnK[i]) {
            shift[i]=1.01*shift[i]
            oldPEanharm=PEanharm
            PEanharm=anharmk2[i]*shift[i]^2 + anharmk3[i]*shift[i]^3
            if (PEanharm<oldPEanharm) break
            }
         while (PEanharm > potentialEnK[i]) {
            shift[i]=0.99*shift[i]
            PEanharm=anharmk2[i]*shift[i]^2 + anharmk3[i]*shift[i]^3
            }
#        print i, PEanharm, potentialEnK[i]
         }
      }
   }

function readDZDM() {
   #numCoord=numFreq+15
   numCoord=3*numAtoms-6+15
   print "numCoord=" numCoord >> "debug.log"
   for (j=1; j<=numCoord; j+=3) {
      getline < "zOrig"
      zAtSym[j] = $1; zGeoOrig[j] = $2; zGeoOrig[j+1] = $3; zGeoOrig[j+2] = $4; zConAtom[j] = $5; zAngAtom[j] = $6; zDihAtom[j] = $7
      }
   for (i=1;i<=numFreq;i++) {
      for (j=1; j<=numCoord; j++) {
         getline < "dzdmlist"
         dzdm[$1,$2]=$3
         }
      }
   close("dzdmlist")
   }

function calcdzdm() {
   #numCoord=numFreq+15
   numCoord=3*numAtoms-6+15
   print "numCoord=" numCoord >> "debug.log"
#take the parent structure and get a zmat geometry
   print "He 0. 0. 0." > "temp394.xyz"
   print "He 1. 0. 0." >> "temp394.xyz"
   print "He 1. 0. 1." >> "temp394.xyz"
   for (i=1;i<=numAtoms;i++) {
      print atSym[i],geoArr[i,1],geoArr[i,2],geoArr[i,3] >> "temp394.xyz"
      }
   close("temp394.xyz")
   system("python ~/Software/Progdyn-main/tozmat.py temp394.xyz > temp394.gzmat")
   system("cp temp394.gzmat zOrig")
   for (j=1; j<=numCoord; j+=3) {
      getline < "temp394.gzmat"
      zAtSym[j] = $1; zGeoOrig[j] = $2; zGeoOrig[j+1] = $3; zGeoOrig[j+2] = $4; zConAtom[j] = $5; zAngAtom[j] = $6; zDihAtom[j] = $7
      }
   close("temp394.gzmat")
   epsilon=0.001
   for (i=1;i<=numFreq;i++) {
      print "He 0. 0. 0." > "temp394.xyz"
      print "He 1. 0. 0." >> "temp394.xyz"
      print "He 1. 0. 1." >> "temp394.xyz"
      for (j=1;j<=numAtoms;j++) {
         print atSym[j],geoArr[j,1]+epsilon*mode[i,j,1],geoArr[j,2]+epsilon*mode[i,j,2],geoArr[j,3]+epsilon*mode[i,j,3] >> "temp394.xyz"
         }
      close("temp394.xyz")
      system("python ~/Software/Progdyn-main/tozmat.py temp394.xyz > temp394.gzmat")
      for (j=1; j<=numCoord; j+=3) {
         getline < "temp394.gzmat"
         zGeoPerturbed[j] = $2; zGeoPerturbed[j+1] = $3; zGeoPerturbed[j+2] = $4
         }
      close("temp394.gzmat")
      for (j=1; j<=numCoord; j++) {
         dzdm[i,j]=(zGeoPerturbed[j] - zGeoOrig[j])/epsilon
         printf("%i  %i  %.8f \n",i, j, dzdm[i,j]) > "dzdmlist"
         }
      }
   print "" > "dzdmlist"
   close("dzdmlist")
   }

function shiftStructure() {
   for (j=1;j<=numCoord;j++) {
      zGeo[j]=zGeoOrig[j]
      for (i=1;i<=numFreq;i++) {
         zGeo[j]=zGeo[j]+shift[i]*dzdm[i,j]
         }
      }
   for (j=1;j<=numCoord;j+=3) {
      i = (j+2)/3
      print zAtSym[j], zGeo[j], zGeo[j+1], zGeo[j+2], zConAtom[j], zAngAtom[j], zDihAtom[j] > "temp394.gzmat"
      }
   close("temp394.gzmat")
   system("python ~/Software/Progdyn-main/toxyz.py temp394.gzmat > temp394.xyz")
   getline < "temp394.xyz"; getline < "temp394.xyz"; getline < "temp394.xyz"
   for (j=1;j<=numAtoms;j++) {
      getline < "temp394.xyz"
      geoArr[j,1]=$2; geoArr[j,2]=$3; geoArr[j,3]=$4
      }
   close("temp394.xyz")
   }

function calcEinModes() {
   KEinitmodes=0
   for (j=1;j<=numAtoms;j++) {
      KEinitmodes=KEinitmodes + 0.5*atWeight[j]*(velArr[j,1]^2 + velArr[j,2]^2 + velArr[j,3]^2)/((timestep^2)*conver1)
      }
   PEinitmodes=0
   for (i=1;i<=numFreq;i++) {
      PEinitmodes = PEinitmodes + potentialEnK[i]
      }
   }

function addMolecularRotation() {
   for (j=1;j<=numAtoms;j++) {
      rotateX[j,1]=0
      rotateX[j,2]=-geoArrOrig[j,3]
      rotateX[j,3]=geoArrOrig[j,2]
      rotateY[j,1]=-geoArrOrig[j,3]
      rotateY[j,2]=0
      rotateY[j,3]=geoArrOrig[j,1]
      rotateZ[j,1]=-geoArrOrig[j,2]
      rotateZ[j,2]=geoArrOrig[j,1]
      rotateZ[j,3]=0
      }
#figure out how much energy is in the raw vectors
   eRotX=0;eRotY=0;eRotZ=0
   for (j=1;j<=numAtoms;j++) {
      for (k=1;k<=3;k++) {
         eRotX=eRotX + 0.5*atWeight[j]*(rotateX[j,k]^2)/((timestep^2)*conver1)
         eRotY=eRotY + 0.5*atWeight[j]*(rotateY[j,k]^2)/((timestep^2)*conver1)
         eRotZ=eRotZ + 0.5*atWeight[j]*(rotateZ[j,k]^2)/((timestep^2)*conver1)
         }
      }
#  print "rotation energies if raw vector used",eRotX,eRotY,eRotZ
#now deciie how much energy we want in each rotation
   keRx=-0.5*0.001987*temp*log(1-randArrR[1])
   keRy=-0.5*0.001987*temp*log(1-randArrR[2])
   keRz=-0.5*0.001987*temp*log(1-randArrR[3])
   if (eRotX<1) keRx=0;if (eRotY<1) keRy=0;if (eRotZ<1) keRz=0
   rotEdesired=keRx+keRy+keRz
   signX=1;signY=1;signZ=1
   if (randArrR[4]<.5) signX=-1
   if (randArrR[5]<.5) signY=-1
   if (randArrR[6]<.5) signZ=-1

#  print "desired energies",keRx,keRy,keRz,"and random numbers",randArrR[1],randArrR[2],randArrR[3]
#protect against zero rotations 
   if (eRotX<1) eRotX=1;if (eRotY<1) eRotY=1;if (eRotZ<1) eRotZ=1
#now scale the rotational vectors
   scaleX=(keRx/eRotX)^.5
   scaleY=(keRy/eRotY)^.5
   scaleZ=(keRz/eRotZ)^.5
#  print "scaling factors" scaleX,scaleY,scaleZ
   for (j=1;j<=numAtoms;j++) {
      for (k=1;k<=3;k++) {
         rotateX[j,k]=rotateX[j,k]*scaleX*signX
         rotateY[j,k]=rotateY[j,k]*scaleY*signY
         rotateZ[j,k]=rotateZ[j,k]*scaleZ*signZ
         }
      }
   for (j=1;j<=numAtoms;j++) {
#     print rotateX[j,1],"   ",rotateX[j,2],"   ",rotateX[j,3]
      }
#  print ""
   for (j=1;j<=numAtoms;j++) {
#     print rotateY[j,1],"   ",rotateY[j,2],"   ",rotateY[j,3]
      }
#  print ""
   for (j=1;j<=numAtoms;j++) {
#     print rotateZ[j,1],"   ",rotateZ[j,2],"   ",rotateZ[j,3]
      }
# now add the rotational vectors  to velArr
   for (j=1;j<=numAtoms;j++) {
      for (k=1;k<=3;k++) {
         velArr[j,k]=velArr[j,k]+rotateX[j,k]+rotateY[j,k]+rotateZ[j,k]
         }
      }
   }

function doCannonBall() {
# strategy is  adjust multiplier until extra energy is correct
   multiplier=1; tester=0; tolerance=.1
   while (tester==0) {
      KEinittotal=0
      for (j=1;j<=numAtoms;j++) {
         cannonvelArr[j,1]=velArr[j,1]+multiplier*cannonArr[j,1]; cannonvelArr[j,2]=velArr[j,2]+multiplier*cannonArr[j,2]; cannonvelArr[j,3]=velArr[j,3]+multiplier*cannonArr[j,3]
         KEinittotal=KEinittotal + 0.5*atWeight[j]*(cannonvelArr[j,1]^2 + cannonvelArr[j,2]^2 + cannonvelArr[j,3]^2)/((timestep^2)*conver1)
         }
      if (KEinittotal>(KEinitmodes+cannonball+tolerance)) multiplier=multiplier*0.98901364
      if (KEinittotal<(KEinitmodes+cannonball-tolerance)) multiplier=multiplier*1.01
      if ((KEinittotal<(KEinitmodes+cannonball+tolerance)) && (KEinittotal>(KEinitmodes+cannonball-tolerance))) tester=1
      }
   for (j=1;j<=numAtoms;j++) {
      velArr[j,1]=velArr[j,1]+multiplier*cannonArr[j,1]; velArr[j,2]=velArr[j,2]+multiplier*cannonArr[j,2]; velArr[j,3]=velArr[j,3]+multiplier*cannonArr[j,3]
      }
   }

function readGeoRecord() {
   currentread=-1; printon=0
   fileok=(getline < "isomernumber")
   if (fileok<1) newisomernumber=1
   if (fileok==1) newisomernumber=$1+1
   printednumber=newisomernumber
   if (readIsomerNumber>newisomernumber) {
      newisomernumber=readIsomerNumber
      }
   fileok=1
   while (fileok==1) {
      fileok=(getline < readGeoFile)
      if ($3=="isomer") {
         currentread=$1
         if (currentread==newisomernumber) printon++
         if (currentread>newisomernumber) {
            printon++
            newisomernumber=currentread
            }
         }
      if ((printon==1) && ($3!="isomer")) {
         print
         printednumber=currentread
         }
      }
   print printednumber-1,"----trajectory isomer number----" > "isomernumber"
   }

