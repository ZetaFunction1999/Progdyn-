BEGIN {
# Nov 2016 organized by functions
# 2014 added ONIOMcharge, more reliable convergence commands
# 2013 added multiple NMR calculations, molecular rotations
# 2012 added NMR calculations
# 2011 added linkatoms in ONIOM
# aug 2010 changed so that it is more careful in reading in from geoPlusVel
#     removed some default parameters that should always be defined
# Jan 2009 - a number of little changes to improve reporting, precision, etc
# aug 2008 added to atom list so handles H to Cl without change needed
# version Feb 2008 incorporates methodfile, boxon and boxsize, though this point unaffected by box
# version Jan 2008 - allows for ONIOM jobs, fixed atoms
# version Sept 2005 - incorportates meth3, meth4, meth5, meth6, but not yet rotation
# this program creates the first input file for g16
# the title should be changed as appropriate
# the isomer number comes from a file isomernumber

initializeparameters()
initializeconstants()
readprogdynconf()

getline < "isomernumber"
isomernum = $1
getline < "runpointnumber"
runpointnum = $1

if (diag>=1) diagnosticsA()
readgeoPlusVel() #this is different from prog2ndpoint and progdynb because we are just getting the geometry, no velocities or old geos

writecomfile()
}

END {
}

########################################################### FUNCTIONS #################################################
function Distance(Atom1,Atom2) {
   return sqrt((oldarr[Atom1,1]-oldarr[Atom2,1])^2+(oldarr[Atom1,2]-oldarr[Atom2,2])^2+(oldarr[Atom1,3]-oldarr[Atom2,3])^2)
   }

# default parameters, including quassiclassical, no displacements, transition state, not a DRP
# do not change these - rather, change progdyn.conf to set the parameters
function initializeparameters() {
   initialDis=0; timestep=1E-15; scaling=1.0; temp=298.15
   classical=0; numimag=1; DRP=0; cannonball=0
   memory=20000000
   diag=1; checkpoint="g16.chk"; searchdir="positive"; boxon=0
   boxsize=10; maxAtomMove=0.1; title1="you"; title2="need"
   title3="a"; title4="progdyn.conf"; processors=1; highlevel=99999; linkatoms=0
   damping=1;nonstandard=0;geometry="nonlinear";nonstandard=0
   nmrtype=0;nmrevery=9999999;nmrcc=0;nmrrand=0;nmrdo=0
   thermostat=0;thermostatemult=1.00
   oniomcharge=0; oniommult=0
   applyforce=0; applyforceB=0; applyforceC=0; zeroatomon=0
   sphereon=0; spheresize=999; sphereforceK=0.01
   empiricaldispersion=0; radiusmultiplier=1.25
   }

function initializeconstants() {
   srand(PROCINFO["pid"])
   i=1;j=1;k=1
   c=29979245800; h=6.626075E-34; avNum=6.0221415E23
   RgasK=0.00198588; RgasJ=8.31447; pi=3.14159265359
   numAtoms=0; atomnumber=0
   conver1=4.184E26 #dividing by this converts amu angs^2 /s^2 to kcal/mol
   OFS="   "
   }

# read progdyn.conf for configuration info
function readprogdynconf() {
   blankLineTester=10
   while (blankLineTester>1) {
      getline < "progdyn.conf"
      if ($1=="method") method=$2
      if ($1=="method2") meth2=$2
      if ($1=="charge") charge=$2
      if ($1=="multiplicity") multiplicity=$2
      if ($1=="oniomchargemult") {
         oniomcharge=$2
         oniommult=$3
         }
      if ($1=="memory") memory=$2
      if ($1=="processors") processors=$2
      if ($1=="checkpoint") checkpoint=$2
      if ($1=="timestep") timestep=$2
      if ($1=="diagnostics") diag=$2
      if ($1=="temperature") temp=$2
      if ($1=="thermostat") thermostat=$2
      if ($1=="thermostatmult") thermostatmult=$2
      if (thermostatmult>1) thermostatmult=1/thermostatmult
      if ($1=="method3") meth3=$2
      if ($1=="method4") meth4=$2
      if ($1=="method5") meth5=$2
      if ($1=="method6") meth6=$2
      if ($1=="method7") meth7=$2
      if ($1=="highlevel") highlevel=$2
      if ($1=="linkatoms") linkatoms=$2
      if ($1=="fixedatom1") fixedatom1=$2
      if ($1=="fixedatom2") fixedatom2=$2
      if ($1=="fixedatom3") fixedatom3=$2
      if ($1=="fixedatom4") fixedatom4=$2
      if ($1=="boxon") boxon=$2
      if ($1=="boxsize") boxsize=$2
      if ($1=="sphereon") sphereon=$2
      if ($1=="spheresize") spheresize=$2
      if ($1=="sphereforce") sphereforceK=$2
      if ($1=="DRP") DRP=$2
      if ($1=="maxAtomMove") maxAtomMove=$2
      if ($1=="methodfile") methodfilelines=$2
      if ($1=="killcheck") killcheck=$2
      if ($1=="empiricaldispersion") empiricaldispersion=$2
      if ($1=="radiusmultiplier") radiusmultiplier=$2
      if ($1=="damping") damping=$2
      if ($1=="NMRmethod") nmrmethod=$2
      if ($1=="NMRmethod2") nmrmethod2=$2
      if ($1=="NMRmethod3") nmrmethod3=$2
      if ($1=="NMRtype") nmrtype=$2
      if ($1=="NMRevery") nmrevery=$2
      if ($1=="NMRrand") nmrrand=$2
      if ($1=="loadlimit") loadlimit=$2
      if ($1=="NMRcc") nmrcc=$2
      if ($1=="nonstandard") nonstandard=$2
      if ($1=="applyforce") {
         applyforce=$2; apforce=$3; apforceX0=$4; apforce2=$5; apforce3=$6
         }
      if ($1=="applyforceB") {
         applyforceB=$2; apforceB=$3; apforceX0B=$4; apforce2B=$5; apforce3B=$6
         }
      if ($1=="applyforceC") {
         applyforceC=$2; apforceC=$3; apforceX0C=$4; apforce2C=$5; apforce3C=$6
         }
      if ($1=="afatoms") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatom[i]=$(i+1)
            }
         }
      if ($1=="afatomsB") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatomB[i]=$(i+1)
            }
         }
      if ($1=="afatomsC") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afatomC[i]=$(i+1)
            }
         }
      if ($1=="applyforceplane") {
         applyforceplane=$2; apforceplane=$3; apforceplaneX0=$4
         }
      if ($1=="afplaneatoms") {
         for (i=1;i<8;i++) {
            if ($(i+1)>0) afplaneatoms[i]=$(i+1)
            }
         }
      if ($1=="zeroatom") {
         zeroatomon=1
         zeroatom=$2
         }
      if ($1=="title") {
         title1=$2
         title2=$3
         title3=$4
         title4=$5
         }
      blankLineTester=length($0)
      }
   }

function diagnosticsA() {
   print "***************** starting prog1stpoint *****************" >> "diagnostics"
   print "method,charge,multiplicity,memory" >> "diagnostics"
   print method,charge,multiplicity,memory >> "diagnostics"
   print "processors,checkpoint,title" >> "diagnostics"
   print processors,checkpoint,title1,title2,title3,title4 >> "diagnostics"
   }

function readgeoPlusVel() {
#this is different from prog2ndpoint and progdynb because we are just getting the geometry, no velocities or old geos
#read in number of atoms, geometry, masses from geoPlusVel
   getline < "geoPlusVel"
   numAtoms=$1
# geometry
   for (i=1;i<=numAtoms;i++) {
      getline < "geoPlusVel"
      weight[i]=$5
      atSym[i]=$1
      for (j=1;j<=3;j++) {
         geoArr[i,j]=$(1+j)
         }
      }
   blankLineTester=10
   while (blankLineTester>1) {
      getline < "geoPlusVel"
      if ($11=="potential") potentialE=$13
      blankLineTester=length($0)
      }
   }

function writecomfile () {
   print "%nproc=" processors
   print "%mem=" memory
   if (killcheck!=1) print "%chk=" checkpoint
   if (nonstandard==0) {
      print "#p " method " force scf=(xqc,maxconven=155,fulllinear,nosym) "
      if (meth2=="unrestricted") print "guess=mix" #for unrestricted calculations
      if (length(meth3)>2) print meth3
      if (length(meth4)>2) print meth4
      }
   if (nonstandard==1) {
      print "# "
      print "nonstd"
      system("cat nonstandard")
      }
   print ""
   print  title1,title2,title3,title4
   print "runpoint ",runpointnum
   print "runisomer ",isomernum
   if (DRP==1) {
      print "maxForce and forceMult and maxAtomMove",maxForce,forceMult,maxAtomMove
      print "maxForce and forceMult and maxAtomMove",maxForce,forceMult,maxAtomMove >> "movelist"
      }
   print ""
   if (oniommult==0) print charge,multiplicity
   if (oniommult>0) print charge,multiplicity,oniomcharge,oniommult
   for (i=1;i<=numAtoms;i++) {
      printf("%s %.7f %.7f %.7f",atSym[i],geoArr[i,1],geoArr[i,2],geoArr[i,3])
      if ((i>highlevel) && (i<=highlevel+linkatoms)) printf(" %s","M H")
      if (i>(highlevel+linkatoms)) printf(" %s","M")
      print ""
      }
   print ""
   if (length(meth5)>2) print meth5
   if (length(meth6)>2) print meth6
   if (methodfilelines>=1) {
      for (i=1;i<=methodfilelines;i++) {
         getline < "methodfile"
         print $0
         }
      }
   print ""
   if ((nmrtype>0) && ((runpointnum % nmrevery)==0)) {
      print "--link1--"
      print "%nproc=" processors
      print "%mem=" memory
      print "%chk=" checkpoint
      print "# " nmrmethod " nmr=giao geom=check"
      if (nmrmethod==method) print "guess=tcheck"
      if (length(meth7)>2) print meth7
      print ""
      print title1,title2,title3,title4
      print "runpoint ",runpointnum
      print "runisomer ",isomernum
      print ""
      print charge,multiplicity
      }
   print ""
   if ((nmrtype>1) && ((runpointnum % nmrevery)==0)) {
      print "--link1--"
      print "%nproc=" processors
      print "%mem=" memory
      print "%chk=" checkpoint
      print "# " nmrmethod2 " nmr=giao geom=check"
      if (length(meth7)>2) print meth7
      print ""
      print title1,title2,title3,title4
      print "runpoint ",runpointnum
      print "runisomer ",isomernum
      print ""
      print charge,multiplicity
      }
   print ""
   if ((nmrtype>2) && ((runpointnum % nmrevery)==0)) {
      print "--link1--"
      print "%nproc=" processors
      print "%mem=" memory
      print "%chk=" checkpoint
      print "# " nmrmethod3 " nmr=giao geom=check"
      if (length(meth7)>2) print meth7
      print ""
      print title1,title2,title3,title4
      print "runpoint ",runpointnum
      print "runisomer ",isomernum
      print ""
      print charge,multiplicity
      }
   print ""
   }

